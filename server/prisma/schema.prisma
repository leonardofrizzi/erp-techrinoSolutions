generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
}

model Client {
  id        String   @id @default(uuid())
  name      String
  cnpj      String?  @unique
  status    String   @default("Ativo")
  createdAt DateTime @default(now())
  
  contacts  Contact[]
  quotes    Quote[]
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String

  quotes    Quote[]
}

model Quote {
  id          String      @id @default(uuid())
  quoteNumber Int         @unique @default(autoincrement())
  status      String      @default("Em Aberto")
  totalValue  Float
  validUntil  DateTime?
  createdAt   DateTime    @default(now())

  client      Client      @relation(fields: [clientId], references: [id])
  clientId    String
  contact     Contact     @relation(fields: [contactId], references: [id])
  contactId   String

  items       QuoteItem[]
  transactions Transaction[]
}

model QuoteItem {
  id          String  @id @default(uuid())
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  quote       Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId     String
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Transaction {
  id              String          @id @default(uuid())
  description     String
  amount          Float
  type            TransactionType
  paymentMethod   String?
  transactionDate DateTime
  createdAt       DateTime        @default(now())

  quote           Quote?          @relation(fields: [quoteId], references: [id])
  quoteId         String?
}